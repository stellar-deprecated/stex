#!/usr/bin/env node

// re-exec as the local version of stex if possible
var localbin = require("../lib/util/localbin");
localbin();

var gotoPackageRoot = require("../lib/util/goto-package-root");
gotoPackageRoot();

var program = require('commander');
var Promise = require('bluebird');
var vm = require('vm');

program
  .version('0.0.1')
  .option('--watch', 'restart server if any files change')
  .option('--nocluster', 'dont run within a cluster');

program
  .command('www')
  .description('start a server running the app')
  .action(function(){
    if(program.watch) {
      var nodemon = require("nodemon");
      nodemon({
        exec: 'stex www',
        ext: 'js json'
      });

    } else {
      var cluster = require('cluster');
      var numCPUs = require('os').cpus().length;
      var childCount = program.nocluster ? 1 : numCPUs;

      if (cluster.isMaster) {
        for (var i = 0; i < childCount; i++) {
          cluster.fork();
        }

        cluster.on('exit', function(worker, code, signal) {
          cluster.fork();
          console.log('worker ' + worker.process.pid + ' died');
        });
      } else {
        loadApp().then(function() {
          var port = conf.get('PORT')
          var server = app.listen(port, function() {
            console.log(stex.name + '-' + process.pid + ' listening on port ' + server.address().port);
          });
        });
      }
    }
  });

program
  .command('console')
  .description('start a repl')
  .action(function(){
    loadApp().then(function() {
      var repl   = require('repl');
      var r = repl.start({'prompt':"> ", 'eval':function(code, context, file, callback){
        defaultEval(code, context, file, function(err, result){
          if(result instanceof Promise){
            callback(err, result.value());
          }else{
            callback(err, result);
          }
        });
      }});
    })
  });

program
  .command('db-console')
  .description('starts a database console')
  .action(function(){
    var kexec = require("kexec");
    loadApp().then(function() {
      var db = conf.get("db");

      if(db.client !== "mysql") {
        console.log("Invalid client: " + db.client + ". only mysql supported for now");
        process.exit(1);
      }

      var program = "mysql";
      var args = [];

      if(db.connection.host) {
        args.push("-h")
        args.push(db.connection.host)
      }

      if(db.connection.user) {
        args.push("-u")
        args.push(db.connection.user)
      }

      if(db.connection.password) {
        args.push("-p")
        args.push(db.connection.password)
      }

      args.push(db.connection.database);
      kexec(program, args);
    });
  });

program
  .command('db-migrate <cmd> [arg]')
  .description('run the migration tool')
  .action(function(cmd, arg){
    var kexec   = require("kexec");
    loadApp().then(function() {
      var program = __dirname + '/../node_modules/.bin/db-migrate';
      var args    = [
        "--config",
        __dirname + "/../lib/db-migrate/config.js",
        "--env",
        conf.NODE_ENV,
        cmd,
        arg
      ]
      kexec(program, args);
    });
  });

program
  .command('humanize-logs')
  .description('processes a stream of json events into a humanized view')
  .action(function(cmd, args){
    var split     = require("split");
    var humanizer = require('../lib/util/json-log-humanizer')

    process.stdin
      .pipe(split(null, humanizer.processLine))
      .pipe(process.stdout)
  });

program.parse(process.argv);

var defaultEval = function(code, context, file, cb) {
  var err, result;
  try {
    result = vm.runInContext(code, context, file);
  } catch (e) {
    err = e;
  }
  if (err && process.domain) {
    process.domain.emit('error', err);
    process.domain.exit();
  } else {
    cb(err, result);
  }
};

function loadApp() {
  return require(process.cwd() + "/lib/app").init().then(function(stex) {
    return stex.activate();
  });
}